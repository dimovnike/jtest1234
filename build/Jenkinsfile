node {
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm

        GIT_COMMIT_EMAIL = sh (
            script: 'git describe --always'
            returnStdout: true
        ).trim()
    }

    def app_http
    stage('Build image 1') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        def dockerfile = './build/http/Dockerfile'
        app_http = docker.build("dev/http", "-f ${dockerfile} .")
    }

    stage('Test image 1') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app_http.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image 1') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://757692613158.dkr.ecr.eu-central-1.amazonaws.com', 'aws-ecr') {
            app_http.push("${GIT_COMMIT_EMAIL}")
            app_http.push("latest")
        }
    }

    def app_cron
    stage('Build image 2') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        def dockerfile = './build/cron/Dockerfile'
        app_cron = docker.build("dev/cron", "-f ${dockerfile} .")
    }

    stage('Test image 2') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app_cron.inside {
            sh 'echo "Tests CRON passed"'
        }
    }

    stage('Push image 2') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://757692613158.dkr.ecr.eu-central-1.amazonaws.com', 'aws-ecr') {
            app_cron.push("${GIT_COMMIT_EMAIL}")
            app_cron.push("latest")
        }
    }
}